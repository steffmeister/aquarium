/* main.c */

#include "main.h"

SDL_Surface *screen;
SDL_Surface *aquarium;
SDL_Surface *board;
SDL_Surface *filter_light;

SDL_Surface *goldfish;

SDL_Surface *temp_surface;

Uint32 transparent_color = 0;

SDL_Event event;

Uint32 flags = SDL_HWSURFACE;

char temp_string[255];

TTF_Font *hud_font;

SDL_Color yellow =	{255,255,0};
SDL_Color white =	{255,255,255};
SDL_Color red =		{255,0,0};

unsigned int money = 1000;
int pollution = 0;

unsigned int shop_tab = 0;
// 0 ... fish
// 1 ... filters

unsigned int filter_type = 0;

int mouse_x;
int mouse_y;

char data_string[255];

struct fish {
	unsigned int active;
	unsigned int type;
	unsigned int x;
	unsigned int y;
	unsigned int direction;
	unsigned int health;
	unsigned int age;
	unsigned int duration;
	unsigned int pollution;
};

struct fish fish_array[MAX_FISH];

Uint32 TimeLeft(void) {
    static Uint32 next_time = 0;
    Uint32 now, ret = 0;
    
    now = SDL_GetTicks();
    if (next_time <= now) {
        next_time = now + TICK_INTERVAL;
        return(ret);
    }
    ret = next_time - now;
    return(ret);
}

void clear_fish_arry(void) {
	unsigned int counter_fish = 0;
	while(counter_fish < (MAX_FISH)) {
		fish_array[counter_fish].active = 0;
		counter_fish++;
	}
}

void add_random_fish(void) {
	unsigned int counter_fish = 0;
	while ((counter_fish < MAX_FISH) && (fish_array[counter_fish].active != 0)) {
		counter_fish++;	
	}
	if (counter_fish < MAX_FISH) {
		fish_array[counter_fish].active = 1;
		fish_array[counter_fish].type = 1;
		fish_array[counter_fish].x = rand()%VIDEO_X;
		fish_array[counter_fish].y = rand()%VIDEO_Y;
		fish_array[counter_fish].health = 100;
		fish_array[counter_fish].age = 0;
		fish_array[counter_fish].direction = rand()%11;
		fish_array[counter_fish].duration = 0;
		fish_array[counter_fish].pollution = GOLDFISH_POLLUTION;
		
		if (fish_array[counter_fish].x < 30) fish_array[counter_fish].x = 30;
		if (fish_array[counter_fish].x > (VIDEO_X-30-goldfish->w)) fish_array[counter_fish].x = VIDEO_X-30-goldfish->w;
		if (fish_array[counter_fish].y < 30) fish_array[counter_fish].y = 30;
		if (fish_array[counter_fish].y > (VIDEO_Y-30-goldfish->h)) fish_array[counter_fish].y = VIDEO_Y-30-goldfish->h;
	}
}

/* get total amount of fishes */
unsigned int count_fishes(void) {
	unsigned int counter_fish = 0;
	unsigned int total_fish = 0;
	while (counter_fish < MAX_FISH) {
		if (fish_array[counter_fish].active == 1) total_fish++;
		counter_fish++;
	}
	return total_fish;
}

void update_hud(void) {
	SDL_Rect buy_rect;
	buy_rect.x = 10;
	buy_rect.y = 570;
	sprintf(temp_string, "Shop");
	temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
	SDL_BlitSurface(temp_surface, NULL, screen, &buy_rect);
	buy_rect.x += 60;
	sprintf(temp_string, "Fishes");
	temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
	SDL_BlitSurface(temp_surface, NULL, screen, &buy_rect);
	buy_rect.x += 60;
	sprintf(temp_string, "$ %d", money);
	temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
	SDL_BlitSurface(temp_surface, NULL, screen, &buy_rect);
	buy_rect.x += 200;
	sprintf(temp_string, "Pollution: %d%%", pollution);
	if (pollution > 60) {
		temp_surface = TTF_RenderText_Solid(hud_font, temp_string, red);
	} else {
		temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
	}
	SDL_BlitSurface(temp_surface, NULL, screen, &buy_rect);
}

void open_fish_table(void) {
	SDL_Rect board_r;
	SDL_Rect source_r;
	unsigned int page = 0;
	unsigned int quit = 0;
	unsigned int redraw_shop = 1;
	unsigned int fish_list_counter = 0;
	unsigned int fish_counter = 0;
	unsigned int max_fishes = 0;
	int activated_fishes[MAX_FISH];
	char fish_name[50];
	int value = 0;
	
	// reset and fill activated_fishes
	fish_counter = 0;
	fish_list_counter = 0;
	while (fish_counter < MAX_FISH) {
		activated_fishes[fish_counter] = -1;
		if (fish_array[fish_counter].active) {
			activated_fishes[fish_list_counter] = fish_counter;
			fish_list_counter++;
		}	
		fish_counter++;
	}
	fish_counter = 0;
	fish_list_counter = 0;
	
	
	
	while(!quit) {
		if (redraw_shop) {
			board_r.x = 100;
			board_r.y = 100;
			SDL_BlitSurface(board, NULL, screen, &board_r);
			board_r.x = 130;
			board_r.y = 120;
			sprintf(temp_string, "fishy table");
			temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
			SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
			
			//max_fishes = count_fishes();
			
			//FIXME get offset
			
			board_r.y = 90;
			//board_r.x = 140;
			
			fish_counter = page*3;
			fish_list_counter = 0;
			//printf("page %d.\n", page);
			while((fish_list_counter < 3) && (fish_counter < MAX_FISH)) {
				if (activated_fishes[fish_counter] != -1) {
				
					board_r.y += 60;
				
					if (fish_array[activated_fishes[fish_counter]].type == GOLDFISH_TYPE) {
						value = GOLDFISH_PRICE - (100 - fish_array[activated_fishes[fish_counter]].health) - fish_array[activated_fishes[fish_counter]].age;
						if (value < 0) value = 0;
						
						sprintf(fish_name, "%s", GOLDFISH_NAME);
						// show image?
						source_r.x = 0;
						source_r.y = 0;
						source_r.w = goldfish->w / 2;
						source_r.h = goldfish->h;
						board_r.x = 140;
						SDL_BlitSurface(goldfish, &source_r, screen, &board_r);
					}
				
					
					// show type
					board_r.x = 260;
					sprintf(temp_string, fish_name);
					temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
					SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
					
					// show id
					board_r.y += 20;
					sprintf(temp_string, "Id: %d", fish_counter);
					temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
					SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
					
					// show health
					board_r.y -= 20;
					board_r.x += 80;
					sprintf(temp_string, "Health: %d", fish_array[activated_fishes[fish_counter]].health);
					temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
					SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
					
					// show age
					board_r.y += 20;
					sprintf(temp_string, "Age: %d", fish_array[activated_fishes[fish_counter]].age);
					temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
					SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
					
					// show value
					board_r.y += 20;
 
					sprintf(temp_string, "Value: %d", value);
					temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
					SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
					
					// show value
					//board_r.y -= 40;
					board_r.x += 120;
					sprintf(temp_string, "Sell");
					temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
					SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
					fish_list_counter++;
				}
				fish_counter++;
			}
			
			board_r.x = 130;
			board_r.y = 470;
			sprintf(temp_string, "Previous");
			temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
			SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
			board_r.x += 80;
			sprintf(temp_string, "Next");
			temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
			SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
			
			SDL_Flip(screen);
			redraw_shop = 0;
		}
		while (SDL_PollEvent(&event)) {
			if (event.type == SDL_KEYDOWN) {
				switch(event.key.keysym.sym) {
					case SDLK_LEFT:
						if (page > 0) {
							page--;
							redraw_shop = 1;
						}
					break;
					case SDLK_RIGHT:
						if (page < (MAX_FISH/3)) {
							page++;
							redraw_shop = 1;
						}
					break;
					case SDLK_F2:
					case SDLK_ESCAPE:
						quit = 1;
					break;
				}
			}
		}
		SDL_Delay(TimeLeft());
	}
}

void open_shop(void) {
	SDL_Rect board_r;
	SDL_Rect source_r;
	unsigned int quit = 0;
	unsigned int redraw_shop = 1;
	
	while(!quit) {
	
		if (redraw_shop) {
			board_r.x = 100;
			board_r.y = 100;
			SDL_BlitSurface(board, NULL, screen, &board_r);
			board_r.x = 130;
			board_r.y = 120;

			// filters
			if (shop_tab == 1) {
				sprintf(temp_string, "ye old filters shop");
				temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
				SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
				board_r.x = 120;
				board_r.y = 200;
				sprintf(temp_string, "fishy filter light, 500$");
				temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
				SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
			// fishes
			} else {

				sprintf(temp_string, "ye old fishy shop");
				temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
				SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
	
				// list fish
				board_r.x = 120;
				board_r.y = 200;
				board_r.w = 100;
				board_r.h = 46;
				source_r.x = 0;
				source_r.y = 0;
				source_r.w = 100;
				source_r.h = 46;
				SDL_BlitSurface(goldfish, &source_r, screen, &board_r);
				board_r.w = 0;
				board_r.h = 0;
				board_r.x = 230;
				board_r.y = 200;
				sprintf(temp_string, "$100");
				temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
				SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
			//	board_r.x = 230;
				board_r.y += 25;
				sprintf(temp_string, "Buy");
				temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
				SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
			}
			
			board_r.x = 130;
			board_r.y = 470;
			sprintf(temp_string, "Fish");
			temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
			SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
			board_r.x += 80;
			sprintf(temp_string, "Filters");
			temp_surface = TTF_RenderText_Solid(hud_font, temp_string, yellow);
			SDL_BlitSurface(temp_surface, NULL, screen, &board_r);
			redraw_shop = 0;
			SDL_Flip(screen);
		}
	
	
		while (SDL_PollEvent(&event)) {
			if (event.type == SDL_KEYDOWN) {
				switch(event.key.keysym.sym) {
					case SDLK_F1:
					case SDLK_ESCAPE:
						quit = 1;
					break;
				}
			} else if (event.type == SDL_MOUSEBUTTONDOWN) {
				SDL_GetMouseState(&mouse_x, &mouse_y);
				if (event.button.button == SDL_BUTTON_LEFT) {
					if ((mouse_x >= 230) && (mouse_x <= 250) &&
						(mouse_y >= 230) && (mouse_y <= 250) && (shop_tab == 0)) {
						if ((money - GOLDFISH_PRICE) >= 0) {
							money -= GOLDFISH_PRICE;
							add_random_fish();
						}
					} else if ((mouse_x >= 120) && (mouse_x <= 160) &&
								(mouse_y >= 200) && (mouse_y <= 220) && (shop_tab == 1)) {
						if ((money - FILTERLIGHT_PRICE) >= 0) {
							money -= FILTERLIGHT_PRICE;
							filter_type = FILTERLIGHT_TYPE;
						}
					// fish tab
					} else if ((mouse_x >= 130) && (mouse_x <= 160) &&
						(mouse_y >= 470) && (mouse_y <= 490)) {
						if (shop_tab != 0) {
							shop_tab = 0;
							redraw_shop = 1;
						}
					// filters tab
					} else if ((mouse_x >= 210) && (mouse_x <= 260) &&
							(mouse_y >= 470) && (mouse_y <= 490)) {
						if (shop_tab != 1) {
							shop_tab = 1;
							redraw_shop = 1;
						}
					} else if ((mouse_x >= 10) && (mouse_x <= 50) &&
						(mouse_y >= 570) && (mouse_y <= 590)) {
						quit = 1;
					}
				}
			}
		}
		SDL_Delay(TimeLeft());
	}
}

void fish_die(unsigned int id) {
	fish_array[id].active = 0;
	fish_array[id].type = 0;
}

Uint32 pollution_timer(Uint32 interval, void *param) {
	unsigned int fish_counter = 0;
	unsigned int goldfish_counter = 0;
	
	// filter work
	switch(filter_type) {
		case FILTERLIGHT_TYPE:
			pollution -= FILTERLIGHT_CLEANING;
		break;
		default:
		break;
	}
	if (pollution < 0) pollution = 0;
	
	// fish work
	while(fish_counter < MAX_FISH) {
		if (fish_array[fish_counter].active == 1) {
			
			pollution += fish_array[fish_counter].pollution;
			
			fish_array[fish_counter].age++;			
			
			if (pollution > 100) pollution = 100;
	
			if (pollution > 60) {
				fish_array[fish_counter].health -= 1;
			} else if (pollution > 65) {
				fish_array[fish_counter].health -= 2;
			} else if (pollution > 70) {
				fish_array[fish_counter].health -= 5;
			} else if (pollution > 90) {
				fish_array[fish_counter].health -= 7;
			}
			if ((fish_array[fish_counter].health < 1) ||
				((fish_array[fish_counter].age > 100) && (rand()%4))) {
				fish_die(fish_counter);
			}
			if (fish_array[fish_counter].type == 1) goldfish_counter++;
		}
		fish_counter++;
	}
	
	// Paarung erst ab 2 Fischen
	if ((goldfish_counter > 1) && (pollution < 70)) {
		// Paarungschance
		if ((rand()%(1+goldfish_counter)) == 0) {
			add_random_fish();
		}
	}
	
	return interval;
}

void game(void) {
	unsigned int quit = 0;
	unsigned int fish_counter = 0;
	
	SDL_TimerID pollution_timer_id;
	
	SDL_Rect fish_target;
	SDL_Rect fish_source;
	SDL_Rect filter_target;
	
	// build first screen
	
	SDL_BlitSurface(aquarium, NULL, screen, NULL);
	SDL_Flip(screen);
	
	pollution_timer_id = SDL_AddTimer(10000, pollution_timer, 0);
	
	while(!quit) {
		while (SDL_PollEvent(&event)) {
			if (event.type == SDL_KEYDOWN) {
				switch(event.key.keysym.sym) {
					case SDLK_SPACE:
						add_random_fish();
					break;
					case SDLK_F1:
						open_shop();
					break;
					case SDLK_F2:
						open_fish_table();
					break;
					case SDLK_ESCAPE:
						quit = 1;
					break;
				}
			} else if (event.type == SDL_MOUSEBUTTONDOWN) {
				SDL_GetMouseState(&mouse_x, &mouse_y);
				if (event.button.button == SDL_BUTTON_LEFT) {
					if ((mouse_x >= 10) && (mouse_x <= 50) &&
						(mouse_y >= 570) && (mouse_y <= 590)) {
						open_shop();
					} else if ((mouse_x >= 70) && (mouse_x <= 115) &&
							(mouse_y >= 570) && (mouse_y <= 590)) {
						open_fish_table();
					}
				}
			}
		}
		
		// rebuild screen
		SDL_BlitSurface(aquarium, NULL, screen, NULL);
		switch(filter_type) {
			case FILTERLIGHT_TYPE:
				filter_target.x = 660;
				filter_target.y = 25;
				SDL_BlitSurface(filter_light, NULL, screen, &filter_target);
			break;
			default:
			break;
		}
		update_hud();
		
		fish_counter = 0;
		while(fish_counter < MAX_FISH) {
			if (fish_array[fish_counter].active == 1) {
				
				//printf("active fish %d\n", fish_counter);
				
				fish_source.x = 0;
				
				switch(fish_array[fish_counter].direction) {
					case 0:
					break;
					case 1:
						fish_source.x = 100;
						fish_array[fish_counter].x--;
						fish_array[fish_counter].y--;
					break;
					case 2:
						fish_source.x = 100;
						fish_array[fish_counter].x--;
						fish_array[fish_counter].y -= 0.5;
					break;
					case 3:
						fish_source.x = 100;
						fish_array[fish_counter].x--;
					break;
					case 4:
						fish_source.x = 100;
						fish_array[fish_counter].x--;
						fish_array[fish_counter].y += 0.5;
					break;
					case 5:
						fish_source.x = 100;
						fish_array[fish_counter].x--;
						fish_array[fish_counter].y++;
					break;
					case 6:
						fish_array[fish_counter].x++;
						fish_array[fish_counter].y--;
					break;
					case 7:
						fish_array[fish_counter].x++;
						fish_array[fish_counter].y -= 0.5;
					break;
					case 8:
						fish_array[fish_counter].x++;
					break;
					case 9:
						fish_array[fish_counter].x++;
						fish_array[fish_counter].y += 0.5;
					break;
					case 10:
						fish_array[fish_counter].x++;
						fish_array[fish_counter].y++;
					break;
				}
				
				fish_array[fish_counter].duration++;
				if (fish_array[fish_counter].duration > 50) {
					fish_array[fish_counter].direction = rand()%11;
					fish_array[fish_counter].duration = 0;
				}
				
				if (fish_array[fish_counter].x < AQUARIUM_SIDE) fish_array[fish_counter].x = AQUARIUM_SIDE;
				if (fish_array[fish_counter].x > (VIDEO_X-AQUARIUM_SIDE-GOLDFISH_WIDTH)) fish_array[fish_counter].x = VIDEO_X-AQUARIUM_SIDE-GOLDFISH_WIDTH;
				if (fish_array[fish_counter].y < AQUARIUM_TOP) fish_array[fish_counter].y = AQUARIUM_TOP;
				if (fish_array[fish_counter].y > (VIDEO_Y-AQUARIUM_BOTTOM-GOLDFISH_HEIGHT)) fish_array[fish_counter].y = VIDEO_Y-AQUARIUM_BOTTOM-GOLDFISH_HEIGHT;
				
				
				fish_source.y = 0;
				fish_source.w = GOLDFISH_WIDTH;
				fish_source.h = GOLDFISH_HEIGHT;
				
				fish_target.x = fish_array[fish_counter].x;
				fish_target.y = fish_array[fish_counter].y;
				fish_target.w = GOLDFISH_WIDTH;
				fish_target.h = GOLDFISH_HEIGHT;
				
				SDL_BlitSurface(goldfish, &fish_source, screen, &fish_target);
			}
			fish_counter++;
		}
				
		// flip and wait
		SDL_Flip(screen);
		SDL_Delay(TimeLeft());
	}
}


int main(void) {
	/* SDL initialisieren: VIDEO Subsystem */
	if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_TIMER) < 0) {
		/* Init schlug fehl, Fehlermeldung ausgeben und beenden */
		fprintf(stderr, "SDL init failed:  %s\n", SDL_GetError());
		exit(1);
	}
	/* Beim Beenden des Programms aufräumen */
	atexit(SDL_Quit);
	
	/* Grafik Surface initialisieren mit 800x600 Pixel und 16Bit Farben */
	screen = SDL_SetVideoMode(VIDEO_X, VIDEO_Y, VIDEO_BPP, flags);
	/* Init schlug fehl wenn NULL, Fehlermeldung ausgeben und beenden */
	if (screen == NULL) {
		fprintf(stderr, "Unable to open window: %s\n", SDL_GetError());
		exit(1);
	}

	if (TTF_Init() == -1) {
		fprintf(stderr, "Unable to init sdl_ttf: %s\n", TTF_GetError());
		exit(1);
	}

	SDL_WM_SetCaption("aquarium", "aquarium");
	
	srand(time(NULL));
	
	sprintf(data_string, "%saquarium.jpg", DATA_DIR);
	temp_surface =  IMG_Load(data_string);
	aquarium = SDL_DisplayFormat(temp_surface);
	SDL_FreeSurface(temp_surface);
	
	sprintf(data_string, "%sboard.jpg", DATA_DIR);
	temp_surface =  IMG_Load(data_string);
	board = SDL_DisplayFormat(temp_surface);
	SDL_FreeSurface(temp_surface);
	
	sprintf(data_string, "%sfilter_light.jpg", DATA_DIR);
	temp_surface =  IMG_Load(data_string);
	filter_light = SDL_DisplayFormat(temp_surface);
	SDL_FreeSurface(temp_surface);
	

	sprintf(data_string, "%sgoldfish.gif", DATA_DIR);
	temp_surface =  IMG_Load(data_string);
	goldfish = SDL_DisplayFormat(temp_surface);
	SDL_FreeSurface(temp_surface);
	transparent_color = SDL_MapRGB(goldfish->format, 0xFF, 0, 0xFF);
	SDL_SetColorKey(goldfish, SDL_SRCCOLORKEY | SDL_RLEACCEL, transparent_color);	
	
	hud_font = TTF_OpenFont("data/Vera.ttf", 16);
	
	
	game();
	
	SDL_FreeSurface(aquarium);
	SDL_FreeSurface(goldfish);
	TTF_CloseFont(hud_font);
	
	return 0;
}

